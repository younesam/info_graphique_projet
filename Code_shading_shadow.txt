#define _CRT_SECURE_NO_WARNINGS 1
#include <vector>

#define STB_IMAGE_WRITE_IMPLEMENTATION
#include "stb_image_write.h"

#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"
#include <iostream>
#include <xlocale>
#include <cstdio>
#include <cmath>
#include <corecrt_math_defines.h>

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

using namespace std;

static inline double sqr(double x) { return x * x; }

class Vector {
public:
	explicit Vector(double x = 0, double y = 0, double z = 0) {
		coord[0] = x;
		coord[1] = y;
		coord[2] = z;
	}
	double& operator[](int i) { return coord[i]; }
	double operator[](int i) const { return coord[i]; }

	Vector& operator+=(const Vector& v) {
		coord[0] += v[0];
		coord[1] += v[1];
		coord[2] += v[2];
		return *this;
	}

	double norm2() const {
		return sqr(coord[0]) + sqr(coord[1]) + sqr(coord[2]);
	}
	void normalize() {
		double vecNorm = sqrt(sqr(coord[0]) + sqr(coord[1]) + sqr(coord[2]));
		coord[0] /= vecNorm;
		coord[1] /= vecNorm;
		coord[2] /= vecNorm;
	}

	double coord[3];
};

Vector operator+(const Vector& a, const Vector& b) {
	return Vector(a[0] + b[0], a[1] + b[1], a[2] + b[2]);
}
Vector operator-(const Vector& a, const Vector& b) {
	return Vector(a[0] - b[0], a[1] - b[1], a[2] - b[2]);
}
Vector operator*(const Vector& a, double b) {
	return Vector(a[0] * b, a[1] * b, a[2] * b);
}
Vector operator*(double a, const Vector& b) {
	return Vector(a * b[0], a * b[1], a * b[2]);
}

double dot(const Vector& a, const Vector& b) {
	return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}


class Ray {
public:
	Ray(const Vector& O, const Vector& u) : O(O), u(u) {};
	Vector O;
	Vector u;
};


class Sphere {
public:
	Sphere(const Vector& C, double R) : C(C), R(R) {};
	Vector C;
	double R{};
};


// Booléen permettant de déterminer si il y a intersection entre une sphère et un rayon
// et stocke le paramètre t dans param
bool intersect(const Sphere& s, const Ray& r, double& param) {
	// equation at² + bt + c = 0
	double a = 1;
	Vector Inter = r.O - s.C;
	double b = dot(r.u, Inter);
	double c = (Inter).norm2() - s.R * s.R;
	double delta = (sqr(b) - a * c);
	double param1;
	double param2;
	if (delta < 0) {
		return false;
	}
	else {
		param1 = dot(r.u, s.C - r.O) - sqrt(delta);
		param2 = dot(r.u, s.C - r.O) + sqrt(delta);
		if (param2 < 0) {
			return false;
		}
		else if (param1 >= 0) {
			param = param1;
			return true;
		}
		else {
			param = param2;
			return true;
		}
	};
};



int main() {
	int W = 512;
	int H = 512;
	double fovAlpha = 60 * M_PI / 180;
	double fov = 2 * tan(fovAlpha / 2);
	Vector C(0, 0, -55);
	Vector O(0, 0, 0);
	double R = 20;
	Sphere s(C, R);
	// Source de lumière S
	Vector S(40, 70, -15);

	std::vector<unsigned char> image(W * H * 3, 0);
#pragma omp parallel for
	for (int i = 0; i < H; i++) {
		for (int j = 0; j < W; j++) {

			Vector u(j - W / 2 + 0.5, -i + H / 2 - 0.5, -W / fov);
			u.normalize();
			Ray r(O, u);

			double t;
			bool intersection = intersect(s, r, t);
			Vector P = O + u * t;
			Vector N = P - C;
			N.normalize();
			Vector omega = S - P;
			omega.normalize();
			double d = sqrt((S - P).norm2());
			double intensite = 10000000;
			// Intensite = 10000000 et S(40, 70, -15) pour obtenir une image correcte
			// Calcul de la visibilité
			//Ray v(P, omega);
			// On lance le rayon v pas de P mais d'un point un peu élevé de P suivant N
			double epsilon = 0.1;
			Vector P_eps = P + N * epsilon;
			Ray v(P_eps, omega);
			double paramv;
			Sphere source_lumiere(S, d);
			bool intersect_visibilite = intersect(source_lumiere, v, paramv);
			double visibilite;
			if (!intersect_visibilite || paramv > d) {
				visibilite = 1;
			}
			else {
				visibilite = 0;
			};

			Vector albedo(0.5, 1, 0);
			double zero = 0;
			double lumiere = intensite * visibilite * max(dot(N, omega), zero) / (4 * sqr(M_PI * d));
			Vector lumiere_couleur = albedo * lumiere;
			//printf(intersection);

			// Correction Gamma
			double gamma = 2.2;

			image[(i * W + j) * 3 + 0] = intersection ? lumiere_couleur[0] : 0;   // RED
			image[(i * W + j) * 3 + 1] = intersection ? lumiere_couleur[1] : 0;  // GREEN
			image[(i * W + j) * 3 + 2] = intersection ? lumiere_couleur[2] : 0;  // BLUE
		}
	}
	stbi_write_png("image.png", W, H, 3, &image[0], 0);

	return 0;
}